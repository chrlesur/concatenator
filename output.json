[
  {
    "name": ".gitignore",
    "content": "# Fichiers générés par Go\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Fichiers de test\n*.test\n\n# Fichiers de couverture de code\n*.out\n\n# Dépendances\n/vendor/\n\n# Fichiers IDE\n.idea/\n.vscode/\n\n# Fichiers système\n.DS_Store\nThumbs.db\r\n",
    "size": 227,
    "modTime": "2024-10-03T18:14:58.1851346+02:00",
    "path": ".gitignore"
  },
  {
    "name": "go.mod",
    "content": "module concatenator\n\ngo 1.22.0\n\nrequire (\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/spf13/cobra v1.8.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n)\n",
    "size": 187,
    "modTime": "2024-10-03T18:15:23.9767035+02:00",
    "path": "go.mod"
  },
  {
    "name": "go.sum",
    "content": "github.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n",
    "size": 896,
    "modTime": "2024-10-03T18:15:23.9798375+02:00",
    "path": "go.sum"
  },
  {
    "name": "main.go",
    "content": "package main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n\t\"io/ioutil\"\r\n\t\"os\"\r\n\t\"path/filepath\"\r\n\t\"time\"\r\n\r\n\t\"github.com/spf13/cobra\"\r\n)\r\n\r\nconst VERSION = \"1.0.0\"\r\n\r\ntype FileInfo struct {\r\n\tName    string    `json:\"name\"`\r\n\tContent string    `json:\"content\"`\r\n\tSize    int64     `json:\"size\"`\r\n\tModTime time.Time `json:\"modTime\"`\r\n\tPath    string    `json:\"path\"`\r\n}\r\n\r\nvar (\r\n\tinputDir  string\r\n\trecursive bool\r\n\trootCmd   = \u0026cobra.Command{\r\n\t\tUse:   \"concatenator\",\r\n\t\tShort: \"A tool to concatenate file information into a JSON file\",\r\n\t\tLong:  `Concatenator is a CLI tool that traverses a directory, collects file information, and outputs it as a structured JSON file.`,\r\n\t}\r\n\tconcatenateCmd = \u0026cobra.Command{\r\n\t\tUse:   \"concatenate [output_file]\",\r\n\t\tShort: \"Concatenate file information into a JSON file\",\r\n\t\tLong:  `Traverse a directory, collect file information, and output it as a structured JSON file.`,\r\n\t\tArgs:  cobra.MaximumNArgs(1),\r\n\t\tRun:   run,\r\n\t}\r\n\tversionCmd = \u0026cobra.Command{\r\n\t\tUse:   \"version\",\r\n\t\tShort: \"Print the version number of concatenator\",\r\n\t\tRun: func(cmd *cobra.Command, args []string) {\r\n\t\t\tfmt.Printf(\"concatenator version %s\\n\", VERSION)\r\n\t\t},\r\n\t}\r\n)\r\n\r\nfunc init() {\r\n\tconcatenateCmd.Flags().StringVarP(\u0026inputDir, \"dir\", \"d\", \".\", \"Input directory\")\r\n\tconcatenateCmd.Flags().BoolVarP(\u0026recursive, \"recursive\", \"r\", false, \"Traverse directory recursively\")\r\n\tconcatenateCmd.Flags().Lookup(\"recursive\").NoOptDefVal = \"true\"\r\n\trootCmd.AddCommand(concatenateCmd, versionCmd)\r\n}\r\n\r\nfunc run(cmd *cobra.Command, args []string) {\r\n\toutputFile := \"output.json\"\r\n\tif len(args) \u003e 0 {\r\n\t\toutputFile = args[0]\r\n\t}\r\n\r\n\tvar files []FileInfo\r\n\terr := filepath.Walk(inputDir, func(path string, info os.FileInfo, err error) error {\r\n\t\tif err != nil {\r\n\t\t\treturn err\r\n\t\t}\r\n\r\n\t\tif !recursive \u0026\u0026 info.IsDir() \u0026\u0026 path != inputDir {\r\n\t\t\treturn filepath.SkipDir\r\n\t\t}\r\n\r\n\t\tif info.IsDir() {\r\n\t\t\treturn nil\r\n\t\t}\r\n\r\n\t\tcontent, err := ioutil.ReadFile(path)\r\n\t\tif err != nil {\r\n\t\t\treturn err\r\n\t\t}\r\n\r\n\t\trelPath, _ := filepath.Rel(inputDir, path)\r\n\t\tfileInfo := FileInfo{\r\n\t\t\tName:    info.Name(),\r\n\t\t\tContent: string(content),\r\n\t\t\tSize:    info.Size(),\r\n\t\t\tModTime: info.ModTime(),\r\n\t\t\tPath:    relPath,\r\n\t\t}\r\n\r\n\t\tfiles = append(files, fileInfo)\r\n\t\treturn nil\r\n\t})\r\n\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"Error while traversing directory: %v\\n\", err)\r\n\t\tos.Exit(1)\r\n\t}\r\n\r\n\tjsonData, err := json.MarshalIndent(files, \"\", \"  \")\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"Error while creating JSON: %v\\n\", err)\r\n\t\tos.Exit(1)\r\n\t}\r\n\r\n\terr = ioutil.WriteFile(outputFile, jsonData, 0644)\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"Error while writing output file: %v\\n\", err)\r\n\t\tos.Exit(1)\r\n\t}\r\n\r\n\tfmt.Printf(\"JSON file created successfully: %s\\n\", outputFile)\r\n}\r\n\r\nfunc main() {\r\n\tif err := rootCmd.Execute(); err != nil {\r\n\t\tfmt.Println(err)\r\n\t\tos.Exit(1)\r\n\t}\r\n}\r\n",
    "size": 2838,
    "modTime": "2024-10-03T18:12:39.8422777+02:00",
    "path": "main.go"
  },
  {
    "name": "output.json",
    "content": "[\n  {\n    \"name\": \".gitignore\",\n    \"content\": \"# Fichiers générés par Go\\n*.exe\\n*.exe~\\n*.dll\\n*.so\\n*.dylib\\n\\n# Fichiers de test\\n*.test\\n\\n# Fichiers de couverture de code\\n*.out\\n\\n# Dépendances\\n/vendor/\\n\\n# Fichiers IDE\\n.idea/\\n.vscode/\\n\\n# Fichiers système\\n.DS_Store\\nThumbs.db\\r\\n\",\n    \"size\": 227,\n    \"modTime\": \"2024-10-03T18:14:58.1851346+02:00\",\n    \"path\": \".gitignore\"\n  },\n  {\n    \"name\": \"go.mod\",\n    \"content\": \"module concatenator\\n\\ngo 1.22.0\\n\\nrequire (\\n\\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\\n\\tgithub.com/spf13/cobra v1.8.1 // indirect\\n\\tgithub.com/spf13/pflag v1.0.5 // indirect\\n)\\n\",\n    \"size\": 187,\n    \"modTime\": \"2024-10-03T18:15:23.9767035+02:00\",\n    \"path\": \"go.mod\"\n  },\n  {\n    \"name\": \"go.sum\",\n    \"content\": \"github.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\\n\",\n    \"size\": 896,\n    \"modTime\": \"2024-10-03T18:15:23.9798375+02:00\",\n    \"path\": \"go.sum\"\n  },\n  {\n    \"name\": \"main.go\",\n    \"content\": \"package main\\r\\n\\r\\nimport (\\r\\n\\t\\\"encoding/json\\\"\\r\\n\\t\\\"fmt\\\"\\r\\n\\t\\\"io/ioutil\\\"\\r\\n\\t\\\"os\\\"\\r\\n\\t\\\"path/filepath\\\"\\r\\n\\t\\\"time\\\"\\r\\n\\r\\n\\t\\\"github.com/spf13/cobra\\\"\\r\\n)\\r\\n\\r\\nconst VERSION = \\\"1.0.0\\\"\\r\\n\\r\\ntype FileInfo struct {\\r\\n\\tName    string    `json:\\\"name\\\"`\\r\\n\\tContent string    `json:\\\"content\\\"`\\r\\n\\tSize    int64     `json:\\\"size\\\"`\\r\\n\\tModTime time.Time `json:\\\"modTime\\\"`\\r\\n\\tPath    string    `json:\\\"path\\\"`\\r\\n}\\r\\n\\r\\nvar (\\r\\n\\tinputDir  string\\r\\n\\trecursive bool\\r\\n\\trootCmd   = \\u0026cobra.Command{\\r\\n\\t\\tUse:   \\\"concatenator\\\",\\r\\n\\t\\tShort: \\\"A tool to concatenate file information into a JSON file\\\",\\r\\n\\t\\tLong:  `Concatenator is a CLI tool that traverses a directory, collects file information, and outputs it as a structured JSON file.`,\\r\\n\\t}\\r\\n\\tconcatenateCmd = \\u0026cobra.Command{\\r\\n\\t\\tUse:   \\\"concatenate [output_file]\\\",\\r\\n\\t\\tShort: \\\"Concatenate file information into a JSON file\\\",\\r\\n\\t\\tLong:  `Traverse a directory, collect file information, and output it as a structured JSON file.`,\\r\\n\\t\\tArgs:  cobra.MaximumNArgs(1),\\r\\n\\t\\tRun:   run,\\r\\n\\t}\\r\\n\\tversionCmd = \\u0026cobra.Command{\\r\\n\\t\\tUse:   \\\"version\\\",\\r\\n\\t\\tShort: \\\"Print the version number of concatenator\\\",\\r\\n\\t\\tRun: func(cmd *cobra.Command, args []string) {\\r\\n\\t\\t\\tfmt.Printf(\\\"concatenator version %s\\\\n\\\", VERSION)\\r\\n\\t\\t},\\r\\n\\t}\\r\\n)\\r\\n\\r\\nfunc init() {\\r\\n\\tconcatenateCmd.Flags().StringVarP(\\u0026inputDir, \\\"dir\\\", \\\"d\\\", \\\".\\\", \\\"Input directory\\\")\\r\\n\\tconcatenateCmd.Flags().BoolVarP(\\u0026recursive, \\\"recursive\\\", \\\"r\\\", false, \\\"Traverse directory recursively\\\")\\r\\n\\tconcatenateCmd.Flags().Lookup(\\\"recursive\\\").NoOptDefVal = \\\"true\\\"\\r\\n\\trootCmd.AddCommand(concatenateCmd, versionCmd)\\r\\n}\\r\\n\\r\\nfunc run(cmd *cobra.Command, args []string) {\\r\\n\\toutputFile := \\\"output.json\\\"\\r\\n\\tif len(args) \\u003e 0 {\\r\\n\\t\\toutputFile = args[0]\\r\\n\\t}\\r\\n\\r\\n\\tvar files []FileInfo\\r\\n\\terr := filepath.Walk(inputDir, func(path string, info os.FileInfo, err error) error {\\r\\n\\t\\tif err != nil {\\r\\n\\t\\t\\treturn err\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif !recursive \\u0026\\u0026 info.IsDir() \\u0026\\u0026 path != inputDir {\\r\\n\\t\\t\\treturn filepath.SkipDir\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif info.IsDir() {\\r\\n\\t\\t\\treturn nil\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tcontent, err := ioutil.ReadFile(path)\\r\\n\\t\\tif err != nil {\\r\\n\\t\\t\\treturn err\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trelPath, _ := filepath.Rel(inputDir, path)\\r\\n\\t\\tfileInfo := FileInfo{\\r\\n\\t\\t\\tName:    info.Name(),\\r\\n\\t\\t\\tContent: string(content),\\r\\n\\t\\t\\tSize:    info.Size(),\\r\\n\\t\\t\\tModTime: info.ModTime(),\\r\\n\\t\\t\\tPath:    relPath,\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfiles = append(files, fileInfo)\\r\\n\\t\\treturn nil\\r\\n\\t})\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Printf(\\\"Error while traversing directory: %v\\\\n\\\", err)\\r\\n\\t\\tos.Exit(1)\\r\\n\\t}\\r\\n\\r\\n\\tjsonData, err := json.MarshalIndent(files, \\\"\\\", \\\"  \\\")\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Printf(\\\"Error while creating JSON: %v\\\\n\\\", err)\\r\\n\\t\\tos.Exit(1)\\r\\n\\t}\\r\\n\\r\\n\\terr = ioutil.WriteFile(outputFile, jsonData, 0644)\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Printf(\\\"Error while writing output file: %v\\\\n\\\", err)\\r\\n\\t\\tos.Exit(1)\\r\\n\\t}\\r\\n\\r\\n\\tfmt.Printf(\\\"JSON file created successfully: %s\\\\n\\\", outputFile)\\r\\n}\\r\\n\\r\\nfunc main() {\\r\\n\\tif err := rootCmd.Execute(); err != nil {\\r\\n\\t\\tfmt.Println(err)\\r\\n\\t\\tos.Exit(1)\\r\\n\\t}\\r\\n}\\r\\n\",\n    \"size\": 2838,\n    \"modTime\": \"2024-10-03T18:12:39.8422777+02:00\",\n    \"path\": \"main.go\"\n  }\n]",
    "size": 5271,
    "modTime": "2024-10-03T18:17:31.235608+02:00",
    "path": "output.json"
  }
]